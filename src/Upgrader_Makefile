LINK:=$(CXX)
ARCH:=$(system lscpu | head -n 1 | awk '{print $2}')

DEPSDIR?=/c/deps/

INCLUDEPATHS?= \
 -I"$(CURDIR)" \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/boost_1_55_0" \
 -I"$(DEPSDIR)/openssl-1.0.1j/include" \
 -I"$(DEPSDIR)/db-4.8.30.NC/build_unix" \
 -I"$(DEPSDIR)/" \
 -I"$(DEPSDIR)/libzip-0.11.2/lib" \
 -I"$(DEPSDIR)/curl-7.39.0-devel-mingw64/include"

 LIBPATHS?= \
 -L"$(CURDIR)/leveldb" \
 -L"$(DEPSDIR)/lib" \
 -L"$(DEPSDIR)/db-4.8.30.NC/build_unix" \
 -L"$(DEPSDIR)/boost_1_55_0/stage/lib" \
 -L"$(DEPSDIR)/openssl-1.0.1j" \
 -L"$(DEPSDIR)/libzip-0.11.2/lib" \
 -L"$(DEPSDIR)/curl-7.39.0/lib/.lib"

BOOST_LIB_SUFFIX = -mgw49-mt-s-1_55

LIBS = \
 -Wl,-Bdynamic \
   -l boost_system$(BOOST_LIB_SUFFIX) \
   -l boost_filesystem$(BOOST_LIB_SUFFIX) \
   -l boost_program_options$(BOOST_LIB_SUFFIX) \
   -l boost_thread$(BOOST_LIB_SUFFIX) \
   -l boost_date_time$(BOOST_LIB_SUFFIX) \
   -l crypto

ifeq (${ARCH}, i686)
    EXT_OPTIONS=-msse2
endif

# Hardening
# Make some classes of vulnerabilities unexploitable in case one is discovered.
#
    # This is a workaround for Ubuntu bug #691722, the default -fstack-protector causes
    # -fstack-protector-all to be ignored unless -fno-stack-protector is used first.
    # see: https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722
    HARDENING=-fno-stack-protector

    # Stack Canaries
    # Put numbers at the beginning of each stack frame and check that they are the same.
    # If a stack buffer if overflowed, it writes over the canary number and then on return
    # when that number is checked, it won't be the same and the program will exit with
    # a "Stack smashing detected" error instead of being exploited.
    HARDENING+=-fstack-protector-all -Wstack-protector

    # Make some important things such as the global offset table read only as soon as
    # the dynamic linker is finished building it. This will prevent overwriting of addresses
    # which would later be jumped to.
    # LDHARDENING+=-Wl,-z,relro -Wl,-z,now

    # Build position independent code to take advantage of Address Space Layout Randomization
    # offered by some kernels.
    # see doc/build-unix.txt for more information.
    ifdef PIE
        HARDENING+=-fPIE
        LDHARDENING+=-pie
    endif

    # -D_FORTIFY_SOURCE=2 does some checking for potentially exploitable code patterns in
    # the source such overflowing a statically defined buffer.
    HARDENING+=-D_FORTIFY_SOURCE=2

DEBUGFLAGS=-g

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-O2 $(EXT_OPTIONS) -pthread -DUPGRADER -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

HEADERS = $(wildcard *.h)

OBJS= \
    obj/util.o \
    obj/upgrader.o \

all: gridcoinupgrader

obj/%.o: %.cpp $(HEADERS)
    g++ -c $(CFLAGS) -o $@ $<

gridcoinupgrader: $(OBJS:obj/%=obj/%)
    $(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

clean:
	-rm -f gridcoinupgrader
	-rm -f obj/*.o
